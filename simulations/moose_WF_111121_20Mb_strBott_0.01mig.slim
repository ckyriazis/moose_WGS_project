initialize() {
	
	initializeMutationRate(7e-9);
	initializeRecombinationRate(1e-8);
	defineConstant("sampleSize", 40);
	defineConstant("seqLength", 20000000);
	
	
	//draw deleterious mutations from Kim 2017 human DFE
	//and allow for different dominance coefficients for mutations with different s
	//by creating different mutation types (faster than fitness callbacks)	
	
	defineConstant("h_VstrDel", 0.0);
	defineConstant("h_strDel", 0.01);
	defineConstant("h_modDel", 0.1);
	defineConstant("h_wkDel", 0.4);
	
	//very strongly deleterious mutations (s<-0.1)
	initializeMutationType("m1", h_VstrDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x >= -0.1); return x;");
	//strongly deleterious mutations (s<-0.01)
	initializeMutationType("m2", h_strDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.1 | x >= -0.01); return x;");
	//moderately deleterious mutations (-0.001 > s >= -0.01)
	initializeMutationType("m3", h_modDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.01 | x >= -0.001); return x;");
	//weakly deleterious mutations (s >= -0.001)
	initializeMutationType("m4", h_wkDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.001); return x;");
	//lethal mutations
	initializeMutationType("m5", 0.0,"f",-1.0);
	//neutral mutations
	initializeMutationType("m6", 0.5,"f",0.0);
	
	
	//g1 is exons and includes all mutation types
	//m1-m3 are deleterious (nonsynonymous) mutations
	//ratio of different deleterious mutation types taken from Kim 2017 DFE (sum to 100 below)
	//assume ratio of deleterious to neutral muts of 2.31:1
	//giving 100/2.31=43.3 for neutral mutations below
	initializeGenomicElementType("g1", c(m1,m2,m3,m4,m5,m6), c(2.6, 23.6, 24.7, 49.1, 0.5, 43.3));
	initializeGenomicElementType("g2", m6, 1);
	initializeGenomicElementType("g3", m6, 1);
	
	// Generate random genes along the chromosome
	base = 0;
	nc_length_total = 0;
	in_length_total = 0;
	ex_length_total = 0;
	while (base < seqLength) {
		// make a non-coding region
		nc_length = asInteger(runif(1, 1000, 10000)); nc_length_total = nc_length_total + nc_length;
		initializeGenomicElement(g2, base, base + nc_length - 1);
		base = base + nc_length;
		// make first exon
		ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1; ex_length_total = ex_length_total + ex_length;
		initializeGenomicElement(g1, base, base + ex_length - 1);
		base = base + ex_length;
		// make additional intron-exon pairs
		do {
			in_length = asInteger(rlnorm(1, log(100), log(1.5))) + 10; in_length_total = in_length_total + in_length;
			initializeGenomicElement(g3, base, base + in_length - 1);
			base = base + in_length;
			ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1; ex_length_total = ex_length_total + ex_length;
			initializeGenomicElement(g1, base, base + ex_length - 1);
			base = base + ex_length;
		} while (runif(1) < 0.8); // 20% probability of stopping
	}
	// final non-coding region
	nc_length = asInteger(runif(1, 100, 5000));
	initializeGenomicElement(g2, base, base + nc_length - 1);
}


// Begin the simulation with burn-in period for ancestral population
1 {
	sim.addSubpop("p1", 6549);
	cat("gen,popSizeP1,meanFitnessP1,meanHetP1,B,FROH_100kbP1,FROH_500kbP1,FROH_1MbP1,FROH_10MbP1,avgvStrDelP1,avgStrDelP1,avgModDelP1,avgWkDelP1,avgNeutP1" + "\n");
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	m4.convertToSubstitution = F;
        m5.convertToSubstitution = F;
	m6.convertToSubstitution = T;
}


// record statistics every 1,000 generations during burn in

1:70000 early() {
	if (sim.generation % 1000 == 0){
		stats = getStats(p1, sampleSize);
		cat(sim.generation + "," + p1.individuals.size() + "," + stats + "\n");
	}
}

// record stats every 100 gens during second epoch
70000:92630 early() {
	if (sim.generation % 100 == 0){
		stats = getStats(p1, sampleSize);
		cat(sim.generation + "," + p1.individuals.size() + "," + stats + "\n");
	}
}


// record stats every 5 generations during NA bottleneck
92630:92660 early() {
        if (sim.generation % 5 == 0){
                if (p1.individuals.size() < sampleSize){
                        stats = getStats(p1, p1.individualCount);
                }
                else{
                        stats = getStats(p1, sampleSize);
                }
                cat(sim.generation + "," + p1.individuals.size() + "," + stats + "\n");
        }
}

// record stats every 20 gens during fourth epoch
92660:93840 early() {
        if (sim.generation % 20 == 0){
                stats = getStats(p1, sampleSize);
                cat(sim.generation + "," + p1.individuals.size() + "," + stats + "\n");
        }
}


// record stats every generation during IR bottleneck
93840:93855 early() {
        if (sim.generation % 1 == 0){
                if (p1.individuals.size() < sampleSize){
                        stats = getStats(p1, p1.individualCount);
                }
                else{
                        stats = getStats(p1, sampleSize);
                }
                cat(sim.generation + "," + p1.individuals.size() + "," + stats + "\n");
        }
}



// 79,647 for 22,630 generations
70000 {
        p1.setSubpopulationSize(79647);
	m6.convertToSubstitution = F;
}

// 49 for 30 generations
92630 {
        p1.setSubpopulationSize(49);
}

// 193,472 for 1180 generations
92660 {
        p1.setSubpopulationSize(193472);
}


// found IR pop
93840 {
        sim.addSubpopSplit("p2", 193472, p1);
        p1.setMigrationRates(c(p2), c(0.01));
	p1.setSubpopulationSize(2);
}
93841 {
	p1.setSubpopulationSize(8);
}

93842 {
	p1.setSubpopulationSize(32);
}

93843 {
        p1.setSubpopulationSize(187);
}

93855 {
	sim.simulationFinished();
}



// define function to sample a population for
// mean fitness, heterozygosity, mean Froh, 
// and avg num of mutations of different classes per individual (very str del, str del, mod del, wk del)
function (s) getStats(o pop, i sampSize)
{
	i = sample(pop.individuals, sampSize, F);
	
	m = sortBy(i.genomes.mutations, "position"); //get all mutations in sample
	m_uniq = unique(m); // get rid of redundant muts
	DAF = sapply(m_uniq, "sum(m == applyValue);"); // count number of each mut in pop
	m_uniq_polym = m_uniq[DAF != i.genomes.size()]; //remove fixed mutations??
	
	//initialize vectors
	ROH_length_sumPerInd_10Mb = c();
	ROH_length_sumPerInd_1Mb = c();
	ROH_length_sumPerInd_500Kb = c();
        ROH_length_sumPerInd_100Kb = c();
	Num_vStrDel_muts = c();
	Num_strDel_muts = c();
	Num_modDel_muts = c();
	Num_wkDel_muts = c();
	Num_neut_muts = c();
	ind_het = c();
	B_pop = c();
	
	for (individual in i) {
		
		indm = sortBy(individual.genomes.mutations, "position");
		indm = indm[match(indm, m_uniq_polym) >= 0];   // Check that individual mutations are not fixed 
		indm_uniq = unique(indm);
		
		genotype = sapply(indm_uniq, "sum(indm == applyValue);");
		
		// tally number of mutations for different classes of selection coefficient per individual
		s = individual.genomes.mutations.selectionCoeff;
		
		Num_vStrDel_muts = c(Num_vStrDel_muts, sum(s<=-0.1));
		Num_strDel_muts = c(Num_strDel_muts, sum(s<=-0.01));
		Num_modDel_muts = c(Num_modDel_muts, sum(s<=-0.001 & s > -0.01));
		Num_wkDel_muts = c(Num_wkDel_muts, sum(s<=-0.00001 & s > -0.001));
		Num_neut_muts = c(Num_neut_muts, sum(s==0.0));
		
		if (isNULL(genotype)) {
			ind_het = c(ind_het, 0); //putting this here to avoid error when trying to sum null vector
			next;
		}
		
		ind_het = c(ind_het, sum(genotype==1)/(seqLength));
		
		//code for getting ROHs 
		
		ID_het = (genotype == 1); //outputs T/F for genotypes if they are het or homDer
		ID_homDer = (genotype == 2);
		pos_het = indm_uniq.position[ID_het]; //outputs positions of heterozgoys genotypes
		
		startpos = c(0, pos_het); //adds 0 to beggining of vector of hets
		endpos = c(pos_het, sim.chromosome.lastPosition); //adds last position in genome to vector of hets
		pos_het_diff = endpos - startpos;


                //sum for ROHs > 10Mb
                ROH_startpos_10Mb = startpos[pos_het_diff > 10000000]; //filter out startpos that dont correspond to ROH > 10Mb
                ROH_endpos_10Mb = endpos[pos_het_diff > 10000000];
                ROH_length_10Mb = pos_het_diff[pos_het_diff > 10000000]; //vector of ROHs for each individual
                ROH_length_sum_10Mb = sum(ROH_length_10Mb);
                ROH_length_sumPerInd_10Mb = c(ROH_length_sumPerInd_10Mb, ROH_length_sum_10Mb); // add sum of ROHs for each individual to vector of ROHs for all individuals
		
		//sum for ROHs > 1Mb
		ROH_startpos_1Mb = startpos[pos_het_diff > 1000000]; //filter out startpos that dont correspond to ROH > 1Mb
		ROH_endpos_1Mb = endpos[pos_het_diff > 1000000];
		ROH_length_1Mb = pos_het_diff[pos_het_diff > 1000000]; //vector of ROHs for each individual	
		ROH_length_sum_1Mb = sum(ROH_length_1Mb);
		ROH_length_sumPerInd_1Mb = c(ROH_length_sumPerInd_1Mb, ROH_length_sum_1Mb); // add sum of ROHs for each individual to vector of ROHs for all individuals
		
		//sum for ROHs > 500kb
		ROH_startpos_500Kb = startpos[pos_het_diff > 500000]; //filter out startpos that dont correspond to ROH > 500 Kb
		ROH_endpos_500Kb = endpos[pos_het_diff > 500000];
		ROH_length_500Kb = pos_het_diff[pos_het_diff > 500000]; //vector of ROHs for each individual	
		ROH_length_sum_500Kb = sum(ROH_length_500Kb);
		ROH_length_sumPerInd_500Kb = c(ROH_length_sumPerInd_500Kb, ROH_length_sum_500Kb); // add sum of ROHs for each individual to vector of ROHs for all individuals


                //sum for ROHs > 100kb
                ROH_startpos_100Kb = startpos[pos_het_diff > 100000]; //filter out startpos that dont correspond to ROH > 100 Kb
                ROH_endpos_100Kb = endpos[pos_het_diff > 100000];
                ROH_length_100Kb = pos_het_diff[pos_het_diff > 100000]; //vector of ROHs for each individual
                ROH_length_sum_100Kb = sum(ROH_length_100Kb);
                ROH_length_sumPerInd_100Kb = c(ROH_length_sumPerInd_100Kb, ROH_length_sum_100Kb); // add sum of ROHs for each individual to vector of ROHs for all individuals
		
		//calculate 2B (inbreeding load)
		del_muts = c(individual.genomes.mutationsOfType(m1),individual.genomes.mutationsOfType(m2),individual.genomes.mutationsOfType(m3),individual.genomes.mutationsOfType(m4),individual.genomes.mutationsOfType(m5));
		B_ind = c();
		
		if (del_muts.length()>0) {
			for(m in del_muts){
				//check if mut is heterozygous
				if(individual.genomes.mutationCountsInGenomes(m)==1){
					
					//protect against case where s < -1 (can happen with gamma DFE)
					s = max(m.selectionCoeff,-1.0);
					//difference in fitness between het and hom is s*(h-1) (1+sh -(1+s))
					B_ind = c(B_ind, s*(m.mutationType.dominanceCoeff-1));
					//catn(m.id + "," +  m.selectionCoeff + "," + m.selectionCoeff*(m.mutationType.dominanceCoeff-1));
				}
			}

			if(isNULL(B_ind)){
				B_pop = c(B_pop, 0.0);
			}
			// this is summed rather than multiplied
			//even if fitness is multiplicative
			else{
				B_pop = c(B_pop, sum(B_ind));
			}

		}
	
	}
	
	return(mean(pop.cachedFitness(NULL)) + "," + mean(ind_het) + "," + mean(B_pop) + "," + mean(ROH_length_sumPerInd_100Kb)/seqLength + "," +  mean(ROH_length_sumPerInd_500Kb)/seqLength + "," + mean(ROH_length_sumPerInd_1Mb)/seqLength + "," + mean(ROH_length_sumPerInd_10Mb)/seqLength + "," + mean(Num_vStrDel_muts) + "," + mean(Num_strDel_muts)+ "," + mean(Num_modDel_muts) + "," + mean(Num_wkDel_muts) + "," + mean(Num_neut_muts));
}
